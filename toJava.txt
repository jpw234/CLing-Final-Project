Words as models

# Constants for positions.
constants of type e : N0 N1 N2 N3 N4 N5 N6 N7 N8 N9 N10 N11 N12 N13 N14 N15 N16 N17 N18 N19 N20 N21 N22 N23 N24 N25 N26 N27 N28 N29 N30 N31 N32 N33 N34 N35 N36 N37 N38 N39 N40 N41 N42 N43 N44 N45 N46 N47 N48 N49 N50 N51 N52 N53 N54 N55 N56 N57 N58 N59 N60 N61 N62 N63 N64 N65 N66 N67 N68 N69 N70 N71 N72 N73 N74 N75 N76 N77 N78 N79 N80 N81 N82 N83 N84 N85 N86 N87 N88 N89 N90 N91 N92 N93 N94 N95 N96 N97 N98 N99  X B C D E F G  True False 
#in future may represent numbers like this
# The adjacency relation.
constants of type <e*e,t> : D
# C(N3) is not needed for java
constants of type <e,e> : C
#may not need as many
variables of type e : x y z
variables of type <e,t> : P-Q
variables of type t : p q
variables of type <e,et> : R
variables of type <et,t> : T
variables of type <<et,t>,e> : W
variables of type <<e,et>,et> : S

#variables of type <<e,et>,t>: J
#variables of type <e,<<e,et>,t>>: I
#no work
variables of type <e,<e,<<e,et>,t>>> : O
#variables of type <e,<e<<e,e>,t>>> : O

multiple letter identifiers

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction

#simple
define set: LxLy[assign(x,y)]
define multiply: LxLy[multiply(x,y)]
define times: LxLy[multiply(x,y)] 
define divide: LxLy[divide(x,y)]
define divided: LxLy[divide(x,y)]
define twice: Lx [multiply(N2,x)]
#for add one to x so 1+x
define add:LxLy[add(x,y)]
#for set x to y plus z so x= y+z
define plus: LxLy [add(x,y)]
# subtract 3 from x so x-3
define subtract: LxLy [subtract(x,y)]
#x minus y
define minus:LxLy[subtract(x,y)]
#x is greater than 3 --> x is greater(y,N3)-->greater(x,N3)
define greater:LxLy[greater(y,x)]
define less:LxLy [less(y,x)]
define equal:LxLy[equal(y,x)]
#remainder of x divided by y
define remainder: Lp[mod(p)]

define increment: Lx[add(N1,x)]
define decrement: Lx[subtract(N1,x)]
#if want to do operators on negative numbers then need
#the complex multiple operator expressions below
define negative: Lx[negative(x)]

define set-t:LxLp[assign(x,p)]

#complex multiple operator expressions...probably will not do
#this because then operator precedence ambiguity
#eg "divide two by x times three" could be (2/x)*3 
#but the person may have meant 2/(x*3) or vice versa
#actually these are very useful for operations on doubles!
#so keep these definitions but still don't want to
#allow more than 1 operation at a time
define multiply-t: LxLp[multiply(x,p)]
define times-t: LxLp[multiply(x,p)] 
define divide-t:LxLp[divide(x,p)]
define divided-t:LxLp[divide(x,p)]
define add-t:LxLp[add(y,p)]
#for set x to y plus z so x= y+z
define plus-t: LxLp[add(x,p)]
#subtract two times y from x
define subtract-t:LxLp[subtract(p,x)]
define minus-t:LxLp[subtract(x,p)]
define greater-t:LxLp[greater(p,x)]
define less-t:LxLp [less(p,x)]
define equal-t:LxLp[equal(p,x)]
#also LpLx


#for doubles (they will have type R, unlike integers that are type e)
# so three point five --> point(N3,N5)
define point: LxLy[point(x,y)]

# The preposition "to" is the constant function on 
# individuals.
define by: Lx.x
define by-t:Lp.p
#by-r doesnt work
define by-r:LxLyLR[R(x,y)]
define to: Lx.x
define to-t: Lp.p
define to-r: LxLyLR[R(x,y)]
define to-q: LTLR.Lx[T(R(x))]
define than:Lx.x
define from:Lx.x
define of: Lp.p
# "is" and "a" are constant function on sets of individuals.
define is: LP.P
#define a: LP.P
define are : LP.P
# Some boolean words.
define and-t: LpLq[q & p]

#if (bool) then so say "if x is greater than two then ..."
# for if block with more than 1 then so "if xequals zero then add one to x,multiply x by five..."
#can treat "multiply x my five" as separate sentence but then when passing lambdacalc trees
#to next stage keep punctuation , so indicates that the sentence is still inside the "if"
#so use "and" to show block structire inside if
define then:Lp.p
define if: LpLq[if(p) -> q]

#after "if" separete sentemce with else
define otherwise: LP[else(P)]

#"while xi is greater than two ..." without "then" lets c how itll work
define while: LpLq[while(p) -> q]

define and-et: LPLQLx[Q(x) & P(x)]
define and-e: LxLyLP [P(x) & P(y)]
define or-e:LxLyLP [P(x) V P(y)]

# Words naming integers and variables
define one: N1 
define two: N2
define three: N3 
define four: N4
define   zero: N0
define    one: N1
define   two: N2
define   three: N3
define    four: N4
define    five: N5
define    six: N6
define     seven: N7
define    eight: N8
define    nine: N9
define    ten: N10
define    eleven: N11
define   twelve: N12
define   thirteen: N13
define    fourteen: N14
define   fifteen: N15
define   sixteen: N16
define   seventeen: N17
define    eighteen: N18
define    nineteen: N19
define   twenty: N20
define    twenty-one: N21
define    twenty-two: N22
define    twenty-three: N23
define    twenty-four: N24
define    twenty-five: N25
define   twenty-six: N26
define   twenty-seven: N27
define   twenty-eight: N28
define  twenty-nine: N29
define  thirty: N30
define  thirty-one: N31
define thirty-two: N32
define thirty-three: N33
define thirty-four: N34
define thirty-five: N35
define thirty-six: N36
define thirty-seven: N37
define thirty-eight: N38
define thirty-nine: N39
define forty: N40
define forty-one: N41
define forty-two: N42
define forty-three: N43
define forty-four: N44
define forty-five: N45
define forty-six: N46
define forty-seven: N47
define forty-eight: N48
define forty-nine: N49
define fifty: N50
define fifty-one: N51
define fifty-two: N52
define fifty-three: N53
define fifty-four: N54
define fifty-five: N55
define fifty-six: N56
define fifty-seven: N57
define fifty-eight: N58
define fifty-nine: N59
define sixty: N60
define sixty-one: N61
define sixty-two: N62
define sixty-three: N63
define sixty-four: N64
define sixty-five: N65
define sixty-six: N66
define sixty-seven: N67
define sixty-eight: N68
define sixty-nine: N69
define seventy: N70
define seventy-one: N71
define seventy-two: N72
define seventy-three: N73
define seventy-four: N74
define seventy-five: N75
define seventy-six: N76
define seventy-seven: N77
define seventy-eight: N78
define seventy-nine: N79
define eighty: N80
define eighty-one: N81
define eighty-two: N82
define eighty-three: N83
define eighty-four: N84
define eighty-five: N85
define eighty-six: N86
define eighty-seven: N87
define eighty-eight: N88
define eighty-nine: N89
define ninety: N90
define ninety-one: N91
define ninety-two: N92
define ninety-three: N93
define ninety-four: N94
define ninety-five: N95
define ninety-six: N96
define ninety-seven: N97
define ninety-eight: N98
define ninety-nine: N99

#have to write out all the integers??  start just 1 to 100
define x: X
define b: B
define c: C  
#and so on
define true: True
define false: False

# negation for bools x not equal to...
define not: LP[not(P)]

# Dummy function that lets the Plop code find the
# result.
define result : Lp.result(p)

exercise tree
title e1
directions set x to two

[result [.NP.nvd.-.-.-.-.- [.NP.nvd.base.-.-.p.- [.NNP.-.- set][.NNP.p.- x]][.PP.nvd.to.np [.TO to][.NP.nvd.base.-.-.-.- [.CD two]]]]]

title e2
directions set y to twice x
[result[.NP.nvd.-.-.-.-.- [.NP.nvd.base.-.-.p.- [.NNP.-.- set-t][.NNP.p.- b]][.PP.nvd.to.np [.TO to-t][.NP.nvd.base.-.-.-.- [.NNP.-.- twice][.NNP.-.- x]]]]]

title e3
directions multiply x by two

#[result[ [[ multiply][[ [ x]] [[ by-r][ [ two]]]]]]]
[result[[ [[ multiply][ [ x]] ]][[ by][ [ two]]]]]

title e4
directions subtract three form x

[result [[[[subtract] [[three]]]  [[from]  [[x]]]]]]


title e5
directions x is greater than three

[[[[x]][[ is] [[[greater][[than] [three]]]]]]]

title e6
directions set x to true

[result [[[set][x]][ [to][[true]]]]]

title e7
directions if x is equal to three then set x to one

#doesnt work [result[[if][[[x]][[ is][[equal][[to][[ three]]]][[ then][[set][[[x]][[[to-r][[ one]]]]]]]]]]]

# complicated braket deletion and insertion
[result[[[if][[[x]][[ is][[equal][[to][[ three]]]]]]][[ then][[[set][[x]]][[[to][[ one]]]]]]]]
