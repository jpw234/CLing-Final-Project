Words as models

# Constants for numbers and user named variables
constants of type erue False 
# The adjacency relation.
constants of type <e*e,t> : D
constants of type <e,e> : C

variables of type e : x y z
variables of type <e,t> : P-Q
variables of type t : p q o r
variables of type <e,et> : R
variables of type <et,t> : T
variables of type <<et,t>,e> : W
variables of type <<e,et>,et> : S
variables of type <e,<t,t>>: Z

#variables of type <<e,et>,t>: J
#variables of type <e,<<e,et>,t>>: I
#no work
#variables of type <e,<e,<<e,et>,t>>> : O
#variables of type <e,<e<<e,e>,t>>> : O

multiple letter identifiers

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction

#simple (int operation int)
define set: LxLy[assign(x,y)]
define multiply: LxLy[multiply(x,y)]
define times: LxLy[multiply(x,y)] 
define divide: LxLy[divide(x,y)]
define divided: LxLy[divide(x,y)]
define twice: Lx [multiply(N2,x)]
#for add one to x so 1+x
define add:LxLy[add(x,y)]
#for set x to y plus z so x= y+z
define plus: LxLy [add(x,y)]
# subtract 3 from y so y-3 
define subtract: LxLy [subtract(y,x)]
#ex: set x to x minus y  if tree is [x [[minus][y]]]--> also similar situation in point(x,y)
#where i assume a different parse, in the future may be better to choose 1 kind of parse and stick to it
#note then will have to rewrite definition for either minus or point
define minus:LyLx[subtract(x,y)]
#x is greater than 3 --> x is greater(y,N3)-->greater(x,N3)
define greater:LxLy[greater(y,x)]
define less:LxLy [less(y,x)]
define equal:LxLy[equal(y,x)]
#remainder of x divided by y
define remainder: Lp[mod(p)]
#not sure how tree will look bu this one works with tree being [[x modulo] y]
define modulo: LxLy[mod(x,y)]

#add or subtract 1 to/from integers only
define increment: Lx[add(N1,x)]
define decrement: Lx[subtract(x,N1)]
#if want to do operators on negative numbers then need
#the complex multiple operator expressions below
#for integers
define negative: Lx[negative(x)]
#for doubles
define negative-t: Lp[negative(p)]

#assignment like x=12*31 or x=point(1,5)
define set-t:LxLp[assign(x,p)]

#complex multiple operator expressions...probably will not do
#this because then operator precedence ambiguity
#eg "divide two by x times three" could be (2/x)*3 
#but the person may have meant 2/(x*3) or vice versa
#actually these are very useful for operations on doubles!
#so keep these definitions but still don't want to
#allow more than 1 operation at a time

#(int operation double)
define multiply-et: LxLp[multiply(x,p)]
define times-et: LxLp[multiply(x,p)] 
define divide-et:LxLp[divide(x,p)]
define divided-et:LxLp[divide(x,p)]
define add-et:LxLp[add(x,p)]
#for set x to y plus z so x=y+z
define plus-et: LxLp[add(x,p)]
#subtract x from p so p-x
define subtract-et:LxLp[subtract(p,x)]
#x-p
define minus-et:LxLp[subtract(x,p)]
#p is [greater than x]
define greater-et:LxLp[greater(p,x)]
define less-et:LxLp [less(p,x)]
define equal-et:LxLp[equal(p,x)]

#also LpLx  (double operation int)
define multiply-te: LpLx[multiply(p,x)]
define times-te: LpLx[multiply(p,x)] 
define divide-te:LpLx[divide(p,x)]
define divided-te:LpLx[divide(p,x)]
define add-te:LpLx[add(p,x)]
define plus-te: LpLx[add(p,x)]
#subtract p from x  (x-p)
define subtract-te:LpLx[subtract(x,p)]
#p - x
define minus-te:LpLx[subtract(p,x)]
#x is [greater than p]
define greater-te:LpLx[greater(x,p)]
define less-te:LpLx[less(x,p)]
define equal-te:LpLx[equal(x,p)]

#now LpLq  (double operation double)
define multiply-tt: LpLq[multiply(p,q)]
define times-tt: LpLq[multiply(p,q)] 
define divide-tt:LpLq[divide(p,q)]
define divided-tt:LpLq[divide(p,q)]
define add-tt:LpLq[add(p,q)]
define plus-tt: LpLq[add(p,q)]
#subtract p from q  (q-p)
define subtract-tt:LpLq[subtract(q,p)]
#p - q
define minus-tt:LpLq[subtract(p,q)]
#p is greater than q  --i took into account tree structure and that q goes into greater(x,y) first
define greater-tt:LqLp[greater(p,q)]
define less-tt:LqLp[less(p,q)]
define equal-tt:LqLp[equal(q,p)]
define modolo-tt: LpLq[mod(p,q)] 

# so three point five --> point(N3,N5)
#same prblm as minus [x [point y]] or [[x point]y]--i assumed [[x point] y]
define point: LxLy[point(x,y)]



# The preposition "to" is the constant function on 
# individuals.
define by: Lx.x
define by-t:Lp.p
define to: Lx.x
define to-t: Lp.p
define than:Lx.x
define than-t:Lp.p
define from:Lx.x
define of: Lp.p
# "is" and "a" are constant function on sets of individuals--later may change these to lx.x or lp.p
#define is: LP.P
#define a: LP.P
# x and y are greater than three
#define are : LP.P


#if (bool) then so say "if x is greater than two then ..."
# for if block with more than 1 then so "if xequals zero then add one to x,multiply x by five..."
#can treat "multiply x my five" as separate sentence but then when passing lambdacalc trees
#to next stage keep punctuation , so indicates that the sentence is still inside the "if"
#so use "and" to show block structire inside if
define then:Lp.p
define if: LpLq[if(p) -> q]

#after "if" separete sentemce with else
define otherwise: LP[else(P)]

#"while xi is greater than two ..." without "then" lets c how itll work
define while: LpLq[while(p) -> q]

#boolean and, used in "x is greater that two and-t y is less than three"
define and-t: LpLq[p & q]

#boolean or, used in "x is greater that two or-t y is less than three"
define or-t:LpLq [p V q]

# Words naming integers
define   zero: N0
define    one: N1
define   two: N2
define   three: N3
define    four: N4
define    five: N5
define    six: N6
define     seven: N7
define    eight: N8
define    nine: N9
define    ten: N10
define    eleven: N11
define   twelve: N12
define   thirteen: N13
define    fourteen: N14
define   fifteen: N15
define   sixteen: N16
define   seventeen: N17
define    eighteen: N18
define    nineteen: N19
define   twenty: N20
define    twenty-one: N21
define    twenty-two: N22
define    twenty-three: N23
define    twenty-four: N24
define    twenty-five: N25
define   twenty-six: N26
define   twenty-seven: N27
define   twenty-eight: N28
define  twenty-nine: N29
define  thirty: N30
define  thirty-one: N31
define thirty-two: N32
define thirty-three: N33
define thirty-four: N34
define thirty-five: N35
define thirty-six: N36
define thirty-seven: N37
define thirty-eight: N38
define thirty-nine: N39
define forty: N40
define forty-one: N41
define forty-two: N42
define forty-three: N43
define forty-four: N44
define forty-five: N45
define forty-six: N46
define forty-seven: N47
define forty-eight: N48
define forty-nine: N49
define fifty: N50
define fifty-one: N51
define fifty-two: N52
define fifty-three: N53
define fifty-four: N54
define fifty-five: N55
define fifty-six: N56
define fifty-seven: N57
define fifty-eight: N58
define fifty-nine: N59
define sixty: N60
define sixty-one: N61
define sixty-two: N62
define sixty-three: N63
define sixty-four: N64
define sixty-five: N65
define sixty-six: N66
define sixty-seven: N67
define sixty-eight: N68
define sixty-nine: N69
define seventy: N70
define seventy-one: N71
define seventy-two: N72
define seventy-three: N73
define seventy-four: N74
define seventy-five: N75
define seventy-six: N76
define seventy-seven: N77
define seventy-eight: N78
define seventy-nine: N79
define eighty: N80
define eighty-one: N81
define eighty-two: N82
define eighty-three: N83
define eighty-four: N84
define eighty-five: N85
define eighty-six: N86
define eighty-seven: N87
define eighty-eight: N88
define eighty-nine: N89
define ninety: N90
define ninety-one: N91
define ninety-two: N92
define ninety-three: N93
define ninety-four: N94
define ninety-five: N95
define ninety-six: N96
define ninety-seven: N97
define ninety-eight: N98
define ninety-nine: N99

#variables user will use, in future think about extending so user can create variable names
#var1 thru var100
define x:X
define b:B
define V1: V1
define V2: V2
define V3: V3
define V4: V4
define V5: V5
define V6: V6
define V7: V7
define V8: V8
define V9: V9
define V10: V10
define V11: V11
define V12: V12
define V13: V13
define V14: V14
define V15: V15
define V16: V16
define V17: V17
define V18: V18
define V19: V19
define V20: V20
define V21: V21
define V22: V22
define V23: V23
define V24: V24
define V25: V25
define V26: V26
define V27: V27
define V28: V28
define V29: V29
define V30: V30
define V31: V31
define V32: V32
define V33: V33
define V34: V34
define V35: V35
define V36: V36
define V37: V37
define V38: V38
define V39: V39
define V40: V40
define V41: V41
define V42: V42
define V43: V43
define V44: V44
define V45: V45
define V46: V46
define V47: V47
define V48: V48
define V49: V49
define V50: V50
define V51: V51
define V52: V52
define V53: V53
define V54: V54
define V55: V55
define V56: V56
define V57: V57
define V58: V58
define V59: V59
define V60: V60
define V61: V61
define V62: V62
define V63: V63
define V64: V64
define V65: V65
define V66: V66
define V67: V67
define V68: V68
define V69: V69
define V70: V70
define V71: V71
define V72: V72
define V73: V73
define V74: V74
define V75: V75
define V76: V76
define V77: V77
define V78: V78
define V79: V79
define V80: V80
define V81: V81
define V82: V82
define V83: V83
define V84: V84
define V85: V85
define V86: V86
define V87: V87
define V88: V88
define V89: V89
define V90: V90
define V91: V91
define V92: V92
define V93: V93
define V94: V94
define V95: V95
define V96: V96
define V97: V97
define V98: V98
define V99: V99
define V100: V100
define V101: V101
define V102: V102
define V103: V103
define V104: V104
define V105: V105
define V106: V106
define V107: V107
define V108: V108
define V109: V109
define V110: V110
define V111: V111
define V112: V112
define V113: V113
define V114: V114
define V115: V115
define V116: V116
define V117: V117
define V118: V118
define V119: V119
define V120: V120
define V121: V121
define V122: V122
define V123: V123
define V124: V124
define V125: V125
define V126: V126
define V127: V127
define V128: V128
define V129: V129
define V130: V130
define V131: V131
define V132: V132
define V133: V133
define V134: V134
define V135: V135
define V136: V136
define V137: V137
define V138: V138
define V139: V139
define V140: V140
define V141: V141
define V142: V142
define V143: V143
define V144: V144
define V145: V145
define V146: V146
define V147: V147
define V148: V148
define V149: V149
define V150: V150
define V151: V151
define V152: V152
define V153: V153
define V154: V154
define V155: V155
define V156: V156
define V157: V157
define V158: V158
define V159: V159
define V160: V160
define V161: V161
define V162: V162
define V163: V163
define V164: V164
define V165: V165
define V166: V166
define V167: V167
define V168: V168
define V169: V169
define V170: V170
define V171: V171
define V172: V172
define V173: V173
define V174: V174
define V175: V175
define V176: V176
define V177: V177
define V178: V178
define V179: V179
define V180: V180
define V181: V181
define V182: V182
define V183: V183
define V184: V184
define V185: V185
define V186: V186
define V187: V187
define V188: V188
define V189: V189
define V190: V190
define V191: V191
define V192: V192
define V193: V193
define V194: V194
define V195: V195
define V196: V196
define V197: V197
define V198: V198
define V199: V199
define V200: V200
#strings 1 thru 100
define S1: S1
define S2: S2
define S3: S3
define S4: S4
define S5: S5
define S6: S6
define S7: S7
define S8: S8
define S9: S9
define S10: S10
define S11: S11
define S12: S12
define S13: S13
define S14: S14
define S15: S15
define S16: S16
define S17: S17
define S18: S18
define S19: S19
define S20: S20
define S21: S21
define S22: S22
define S23: S23
define S24: S24
define S25: S25
define S26: S26
define S27: S27
define S28: S28
define S29: S29
define S30: S30
define S31: S31
define S32: S32
define S33: S33
define S34: S34
define S35: S35
define S36: S36
define S37: S37
define S38: S38
define S39: S39
define S40: S40
define S41: S41
define S42: S42
define S43: S43
define S44: S44
define S45: S45
define S46: S46
define S47: S47
define S48: S48
define S49: S49
define S50: S50
define S51: S51
define S52: S52
define S53: S53
define S54: S54
define S55: S55
define S56: S56
define S57: S57
define S58: S58
define S59: S59
define S60: S60
define S61: S61
define S62: S62
define S63: S63
define S64: S64
define S65: S65
define S66: S66
define S67: S67
define S68: S68
define S69: S69
define S70: S70
define S71: S71
define S72: S72
define S73: S73
define S74: S74
define S75: S75
define S76: S76
define S77: S77
define S78: S78
define S79: S79
define S80: S80
define S81: S81
define S82: S82
define S83: S83
define S84: S84
define S85: S85
define S86: S86
define S87: S87
define S88: S88
define S89: S89
define S90: S90
define S91: S91
define S92: S92
define S93: S93
define S94: S94
define S95: S95
define S96: S96
define S97: S97
define S98: S98
define S99: S99
define S100: S100
#booleans
define true: True
define false: False

# negation for bools x not equal to...
define not: LP[not(P)]

#declaring
define declare: Lp.p
define a: Lp.p
define an: Lp.p
define integer: Lx [int(x)]
define double: Lx [double(x)]
define boolean: Lx [bool(x)]

#printing and returning
define print: Lx[print(x)]
define print-t: Lp[print(p)]
define return:Lx[return(x)]
define return-t:Lp[return(p)]

exercise tree
title e1
directions set x to two

[[.NP.nvd.-.-.-.-.- [.NP.nvd.base.-.-.p.- [.NNP.-.- set][.NNP.p.- x]][.PP.nvd.to.np [.TO to][.NP.nvd.base.-.-.-.- [.CD two]]]]]

title e2
directions set y to twice x
[[.NP.nvd.-.-.-.-.- [.NP.nvd.base.-.-.p.- [.NNP.-.- set-t][.NNP.p.- b]][.PP.nvd.to.np [.TO to-t][.NP.nvd.base.-.-.-.- [.NNP.-.- twice][.NNP.-.- x]]]]]

title e3
directions multiply x by two

#[result[ [[ multiply][[ [ x]] [[ by-r][ [ two]]]]]]]
[[[ [[ multiply][ [ x]] ]][[ by][ [ two]]]]]

title e4
directions subtract three form x

[[[[[subtract] [[N3]]]  [[from]  [[x]]]]]]


title e5
directions x is greater than three

[[[[x]][[ is] [[[greater][[than] [three]]]]]]]

title e6
directions set x to true

[ [[[set][x]][ [to][[true]]]]]

title e7
directions if x is equal to three then set x to one

#doesnt work [result[[if][[[x]][[ is][[equal][[to][[ three]]]][[ then][[set][[[x]][[[to-r][[ one]]]]]]]]]]]

# complicated braket deletion and insertion
[[[[if][[[x]][[ is][[equal][[to][[ three]]]]]]][[ then][[[set][[x]]][[[to][[ one]]]]]]]]

title e8
directions x divided by x

[[[[ x] [divided]] [[by] [[ x]]]]]

title e9

[[[[[set-t][[x]]] [[to-t] [[[ three][point]] [two]]]]]]

title e10
[[[[set-t][x]][[to-t][[thirty][[plus][forty-seven]]]]]]

